class PatrolMap {
    constructor() {
        this.map = null;
        this.markers = new Map();
        this.dataUrl = 'https://raw.githubusercontent.com/samkurp/samkurp/main/patrols_data.json';
        this.autoRefreshInterval = null;
        
        this.initMap();
        this.loadData();
        this.startAutoRefresh();
    }
    
    initMap() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ –ú–æ—Å–∫–≤–µ
        this.map = L.map('map').setView([55.7558, 37.6173], 10);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(this.map);
    }
    
    createCustomIcon() {
        return L.divIcon({
            className: 'patrol-marker',
            html: '<div class="marker-icon"></div>',
            iconSize: [32, 32],
            iconAnchor: [16, 16]
        });
    }
    
    async loadData() {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            const response = await fetch(`${this.dataUrl}?t=${Date.now()}`);
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
            
            const patrols = await response.json();
            this.updateMap(patrols);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
        }
    }
    
    updateMap(patrols) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        this.markers.forEach(marker => this.map.removeLayer(marker));
        this.markers.clear();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
        patrols.forEach(patrol => {
            const customIcon = this.createCustomIcon();
            
            const marker = L.marker([patrol.latitude, patrol.longitude], {
                icon: customIcon
            }).addTo(this.map);
            
            // –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
            const popupContent = `
                <div class="popup-content">
                    <strong>üöì –ü–∞—Ç—Ä—É–ª—å –î–ü–°</strong><br>
                    üë§ ${patrol.username}<br>
                    üïê ${patrol.date}<br>
                    üìç ${patrol.latitude.toFixed(6)}, ${patrol.longitude.toFixed(6)}
                </div>
            `;
            
            marker.bindPopup(popupContent, {
                className: 'custom-popup',
                maxWidth: 300
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä
            this.markers.set(`${patrol.latitude}-${patrol.longitude}-${patrol.timestamp}`, marker);
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑—É–º–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã
        if (patrols.length > 0) {
            const group = new L.featureGroup(Array.from(this.markers.values()));
            this.map.fitBounds(group.getBounds().pad(0.1));
        }
    }
    
    startAutoRefresh() {
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
        }
        
        this.autoRefreshInterval = setInterval(() => {
            this.loadData();
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new PatrolMap();
});
