// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let map;
let markers = [];
let userMarker = null;

// –ò–∫–æ–Ω–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ –î–ü–°
const dpsIcon = L.divIcon({
    className: 'dps-marker',
    html: 'üöî',
    iconSize: [30, 30],
    iconAnchor: [15, 15],
    popupAnchor: [0, -15]
});

// –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userIcon = L.divIcon({
    className: 'user-marker',
    html: 'üìç',
    iconSize: [25, 25],
    iconAnchor: [12, 12]
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    map = L.map('map').setView([55.7558, 37.6173], 12);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 19
    }).addTo(map);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.expand();
    tg.enableClosingConfirmation();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadDpsData();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    setupButtons();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserLocation();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –î–ü–°
async function loadDpsData() {
    try {
        const statsElement = document.getElementById('stats');
        statsElement.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';
        
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
        const response = await fetch('/api/dps-data');
        const data = await response.json();
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        clearMarkers();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        data.locations.forEach(location => {
            const marker = L.marker([location.lat, location.lon], { icon: dpsIcon })
                .addTo(map)
                .bindPopup(createPopupContent(location));
            
            markers.push(marker);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statsElement.innerHTML = `üìä –≠–∫–∏–ø–∞–∂–µ–π: ${data.locations.length} | ‚è∞ ${new Date().toLocaleTimeString()}`;
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∏
        if (data.locations.length > 0 && data.center) {
            map.setView([data.center.lat, data.center.lon], data.zoom || 12);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        document.getElementById('stats').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ø–∞–ø–∞
function createPopupContent(location) {
    return `
        <div class="dps-popup">
            <h3>üöî –î–ü–° –≠–∫–∏–ø–∞–∂</h3>
            <p><strong>üìç:</strong> ${location.comment}</p>
            <p><strong>üë§:</strong> ${location.username}</p>
            <p class="time"><strong>‚è∞:</strong> ${location.time}</p>
        </div>
    `;
}

// –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
function clearMarkers() {
    markers.forEach(marker => map.removeLayer(marker));
    markers = [];
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
function setupButtons() {
    document.getElementById('refreshBtn').addEventListener('click', loadDpsData);
    
    document.getElementById('myLocationBtn').addEventListener('click', () => {
        if (userMarker) {
            map.setView(userMarker.getLatLng(), 15);
        } else {
            getUserLocation();
        }
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            position => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                
                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä
                if (userMarker) {
                    map.removeLayer(userMarker);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
                userMarker = L.marker([lat, lon], { icon: userIcon })
                    .addTo(map)
                    .bindPopup('üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
                
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                map.setView([lat, lon], 15);
            },
            error => {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:', error);
            },
            { enableHighAccuracy: true, timeout: 10000 }
        );
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initMap);